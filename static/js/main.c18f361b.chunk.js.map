{"version":3,"sources":["components/Prompt.jsx","components/AnswerInput.jsx","components/AnswerDisplay.jsx","components/AnswerCheck.jsx","components/SubmitButton.jsx","data/questions_korean.js","App.js","reportWebVitals.js","index.js"],"names":["Prompt","style","fontSize","fontFamily","this","props","prompt","Component","AnswerInput","handleChange","event","handleKeyPress","key","checkAnswer","handleAnimationEnd","type","className","classes","value","onChange","onKeyPress","onAnimationEnd","placeholder","AnswerDisplay","answer","fontWeight","answers","fontStyle","translation","AnswerCheck","handleClick","componentToRender","content","textDecoration","cursor","onClick","tabIndex","SubmitButton","preventDefault","QUESTIONS","synth","window","speechSynthesis","App","resetAnswerInputAndCheck","setState","answerCheckContent","inputClasses","setNewQuestion","newQuestionID","Math","floor","random","length","wrongAnswers","state","latestWrongAnswers","latestAnswers","includes","shift","currentQuestionID","inputLocked","startNewRound","newLatestAnswers","pop","inputValue","handleChangeAnswerInput","target","handleClickAnswerCheck","currentQuestion","toLowerCase","toSpeak","SpeechSynthesisUtterance","lang","speak","setTimeout","prevState","marginTop","map","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c18f361b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Prompt extends Component {\n  render() {\n    return (\n      <div style={{ fontSize: '3rem' }}>\n        <span style={{ fontFamily: \"'Noto Sans KR', sans-serif\" }}>{this.props.prompt}</span>\n        &nbsp;/&nbsp;\n        <span style={{ fontFamily: \"'Noto Serif KR', serif\" }}>{this.props.prompt}</span>\n      </div>\n    );\n  }\n}\n\nexport default Prompt;\n","import React, { Component } from 'react';\n\nclass AnswerInput extends Component {\n  handleChange = (event) => {\n    this.props.handleChange(event);\n  };\n\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      this.props.checkAnswer();\n    }\n  };\n\n  handleAnimationEnd = (event) => {\n    this.props.handleAnimationEnd();\n  };\n\n  render() {\n    return (\n      <input type=\"text\"\n          className={this.props.classes}\n          value={this.props.value}\n          onChange={this.handleChange}\n          onKeyPress={this.handleKeyPress}\n          onAnimationEnd={this.handleAnimationEnd}\n          placeholder=\"Enter romanisation\" />\n    );\n  }\n}\n\nexport default AnswerInput;\n","import React, { Component } from 'react';\n\nclass AnswerDisplay extends Component {\n  render() {\n    const answer = this.props.answer;\n\n    return (\n      <div>\n        <span style={{fontWeight: 'bold', fontFamily: \"'Noto Sans KR', sans-serif\" }}>{answer.prompt}</span>\n        &nbsp;-&nbsp;\n        /{answer.answers[0]}/ <span style={{fontStyle: 'italic'}}>{answer.translation}</span>\n      </div>\n    );\n  }\n}\n\nexport default AnswerDisplay;\n","import React, { Component } from 'react';\n\nclass AnswerCheck extends Component {\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      this.props.handleClick();\n    }\n  };\n\n  componentToRender = () => {\n    if (this.props.content === 'show-answer') {\n      return (\n          <span style={{ textDecoration: 'underline', cursor: 'pointer' }}\n              className='focusable'\n              onClick={this.props.handleClick}\n              onKeyPress={this.handleKeyPress}\n              tabIndex=\"0\">Show answer</span>\n        );\n    } else if (this.props.content === 'correct') {\n      return <span>&#10003;</span>;\n    } else if (this.props.content === 'sorry') {\n      return <span>Sorry! Try again</span>\n    } else {\n      return <span tabIndex=\"0\" className='focusable'>{this.props.content}</span>;\n    }\n  };\n\n  render() {\n    return (\n      <div style={{fontSize: '1.5rem'}}>\n        {this.componentToRender()}\n      </div>\n    );\n  }\n}\n\nexport default AnswerCheck;\n","import React, { Component } from 'react';\n\nclass SubmitButton extends Component {\n  handleClick = (event) => {\n    event.preventDefault();\n    this.props.checkAnswer();\n  };\n\n  render() {\n    return (\n      <input type=\"submit\" value=\"Enter\" onClick={this.handleClick} />\n    );\n  }\n}\n\nexport default SubmitButton;\n","// Question template\n/*\n,\n  {\n    prompt: '',\n    answers: [''],\n    translation: ''\n  }\n*/\n\nconst QUESTIONS = [\n  {\n    prompt: '한글',\n    answers: ['hangeul'],\n    translation: 'Hangeul (or Hangul after a former romanisation scheme)'\n  },\n  {\n    prompt: '세종',\n    answers: ['sejong'],\n    translation: 'Sejong the Great (1397-1450), king best known for creating Hangeul'\n  },\n  {\n    prompt: '한국',\n    answers: ['hanguk'],\n    translation: 'Korea'\n  },\n  {\n    prompt: '네',\n    answers: ['ne'],\n    translation: 'yes'\n  },\n  {\n    prompt: '아니요',\n    answers: ['aniyo'],\n    translation: 'no'\n  },\n  {\n    prompt: '물',\n    answers: ['mul'],\n    translation: 'water'\n  },\n  {\n    prompt: '밥',\n    answers: ['bap'],\n    translation: 'rice'\n  },\n  {\n    prompt: '빵',\n    answers: ['ppang'],\n    translation: 'bread'\n  },\n  {\n    prompt: '커피',\n    answers: ['keopi'],\n    translation: 'coffee'\n  },\n  {\n    prompt: '단어',\n    answers: ['daneo'],\n    translation: 'word'\n  },\n  {\n    prompt: '눈',\n    answers: ['nun'],\n    translation: 'eye'\n  },\n  {\n    prompt: '아이',\n    answers: ['ai'],\n    translation: 'child'\n  },\n  {\n    prompt: '메뉴',\n    answers: ['menyu'],\n    translation: 'menu'\n  },\n  {\n    prompt: '문',\n    answers: ['mun'],\n    translation: 'door'\n  },\n  {\n    prompt: '영',\n    answers: ['yeong'],\n    translation: '0 (Sino-Korean system)'\n  },\n  {\n    prompt: '일',\n    answers: ['il'],\n    translation: '1 (Sino-Korean system)'\n  },\n  {\n    prompt: '이',\n    answers: ['i'],\n    translation: '2 (Sino-Korean system); this; tooth'\n  },\n  {\n    prompt: '삼',\n    answers: ['sam'],\n    translation: '3 (Sino-Korean system)'\n  },\n  {\n    prompt: '사',\n    answers: ['sa'],\n    translation: '4 (Sino-Korean system)'\n  },\n  {\n    prompt: '오',\n    answers: ['o'],\n    translation: '5 (Sino-Korean system)'\n  },\n  {\n    prompt: '육',\n    answers: ['yuk'],\n    translation: '6 (Sino-Korean system)'\n  },\n  {\n    prompt: '칠',\n    answers: ['chil'],\n    translation: '7 (Sino-Korean system)'\n  },\n  {\n    prompt: '팔',\n    answers: ['pal'],\n    translation: 'arm, 8 (Sino-Korean system)'\n  },\n  {\n    prompt: '구',\n    answers: ['gu'],\n    translation: '9 (Sino-Korean system)'\n  },\n  {\n    prompt: '십',\n    answers: ['ship'],\n    translation: '10 (Sino-Korean system)'\n  },\n  {\n    prompt: '하나',\n    answers: ['hana'],\n    translation: '1 (Native-Korean system)'\n  },\n  {\n    prompt: '둘',\n    answers: ['dul'],\n    translation: '2 (Native-Korean system)'\n  },\n  {\n    prompt: '셋',\n    answers: ['set'],\n    translation: '3 (Native-Korean system)'\n  },\n  {\n    prompt: '넷',\n    answers: ['net'],\n    translation: '4 (Native-Korean system)'\n  },\n  {\n    prompt: '다섯',\n    answers: ['daseot'],\n    translation: '5 (Native-Korean system)'\n  },\n  {\n    prompt: '여섯',\n    answers: ['yeoseot'],\n    translation: '6 (Native-Korean system)'\n  },\n  {\n    prompt: '일곱',\n    answers: ['ilgop'],\n    translation: '7 (Native-Korean system)'\n  },\n  {\n    prompt: '여덟',\n    answers: ['yeodeol'],\n    translation: '8 (Native-Korean system)'\n  },\n  {\n    prompt: '아홉',\n    answers: ['ahop'],\n    translation: '9 (Native-Korean system)'\n  },\n  {\n    prompt: '열',\n    answers: ['yeol'],\n    translation: '10 (Native-Korean system)'\n  },\n  {\n    prompt: '오늘',\n    answers: ['oneul'],\n    translation: 'today'\n  },\n  {\n    prompt: '가다',\n    answers: ['gada'],\n    translation: 'to go'\n  },\n  {\n    prompt: '자다',\n    answers: ['jada'],\n    translation: 'to sleep'\n  },\n  {\n    prompt: '먹다',\n    answers: ['meokda'],\n    translation: 'to eat'\n  },\n  {\n    prompt: '말하다',\n    answers: ['malhada'],\n    translation: 'to speak'\n  },\n  {\n    prompt: '만나다',\n    answers: ['mannada'],\n    translation: 'to meet, to see (someone)'\n  },\n  {\n    prompt: '보다',\n    answers: ['boda'],\n    translation: 'to see, to look at'\n  },\n  {\n    prompt: '기역',\n    answers: ['giyeok'],\n    translation: 'the letter ㄱ'\n  },\n  {\n    prompt: '니은',\n    answers: ['nieun'],\n    translation: 'the letter ㄴ'\n  },\n  {\n    prompt: '디귿',\n    answers: ['digeut'],\n    translation: 'the letter ㄷ'\n  },\n  {\n    prompt: '리을',\n    answers: ['rieul'],\n    translation: 'the letter ㄹ'\n  },\n  {\n    prompt: '미음',\n    answers: ['mieum'],\n    translation: 'the letter ㅁ'\n  },\n  {\n    prompt: '비읍',\n    answers: ['bieup'],\n    translation: 'the letter ㅂ'\n  },\n  {\n    prompt: '시옷',\n    answers: ['siot'],\n    translation: 'the letter ㅅ'\n  },\n  {\n    prompt: '이응',\n    answers: ['ieung'],\n    translation: 'the letter ㅇ'\n  },\n  {\n    prompt: '지읒',\n    answers: ['jieut'],\n    translation: 'the letter ㅈ'\n  },\n  {\n    prompt: '치읓',\n    answers: ['chieut'],\n    translation: 'the letter ㅊ'\n  },\n  {\n    prompt: '키읔',\n    answers: ['kieuk'],\n    translation: 'the letter ㅋ'\n  },\n  {\n    prompt: '티읕',\n    answers: ['tieut'],\n    translation: 'the letter ㅌ'\n  },\n  {\n    prompt: '피읖',\n    answers: ['pieup'],\n    translation: 'the letter ㅍ'\n  },\n  {\n    prompt: '히읗',\n    answers: ['hieut'],\n    translation: 'the letter ㅎ'\n  },\n  {\n    prompt: '집',\n    answers: ['jip'],\n    translation: 'house'\n  },\n  {\n    prompt: '아마도',\n    answers: ['amado'],\n    translation: 'maybe, perhaps'\n  },\n  {\n    prompt: '머리',\n    answers: ['meori'],\n    translation: 'head; hair'\n  },\n  {\n    prompt: '코',\n    answers: ['ko'],\n    translation: 'nose'\n  },\n  {\n    prompt: '귀',\n    answers: ['gwi'],\n    translation: 'ear'\n  },\n  {\n    prompt: '입',\n    answers: ['ip'],\n    translation: 'mouth'\n  },\n  {\n    prompt: '이',\n    answers: ['i'],\n    translation: 'teeth'\n  },\n  {\n    prompt: '목',\n    answers: ['mok'],\n    translation: 'neck'\n  },\n  {\n    prompt: '손',\n    answers: ['son'],\n    translation: 'hand; guest'\n  },\n  {\n    prompt: '다리',\n    answers: ['dari'],\n    translation: 'leg'\n  },\n  {\n    prompt: '발',\n    answers: ['bal'],\n    translation: 'foot'\n  },\n  {\n    prompt: '몸',\n    answers: ['mom'],\n    translation: 'body'\n  },\n  {\n    prompt: '개',\n    answers: ['gae'],\n    translation: 'dog'\n  },\n  {\n    prompt: '고양이',\n    answers: ['goyangi'],\n    translation: 'cat'\n  },\n  {\n    prompt: '새',\n    answers: ['sae'],\n    translation: 'bird'\n  },\n  {\n    prompt: '물고기',\n    answers: ['mulgogi'],\n    translation: 'fish'\n  },\n  {\n    prompt: '토끼',\n    answers: ['tokki'],\n    translation: 'rabbit'\n  },\n  {\n    prompt: '말',\n    answers: ['mal'],\n    translation: 'horse'\n  },\n  {\n    prompt: '소',\n    answers: ['so'],\n    translation: 'cow'\n  },\n  {\n    prompt: '쥐',\n    answers: ['jwi'],\n    translation: 'mouse'\n  },\n  {\n    prompt: '돼지',\n    answers: ['dwaeji'],\n    translation: 'pig'\n  },\n  {\n    prompt: '염소',\n    answers: ['yeomso'],\n    translation: 'goat'\n  },\n  {\n    prompt: '양',\n    answers: ['yang'],\n    translation: 'sheep'\n  },\n  {\n    prompt: '닭',\n    answers: ['dak'],\n    translation: 'chicken'\n  },\n  {\n    prompt: '늑대',\n    answers: ['neukdae'],\n    translation: 'wolf'\n  },\n  {\n    prompt: '여우',\n    answers: ['yeou'],\n    translation: 'fox'\n  },\n  {\n    prompt: '사슴',\n    answers: ['saseum'],\n    translation: 'deer'\n  },\n  {\n    prompt: '황소',\n    answers: ['hwangso'],\n    translation: 'ox'\n  },\n  {\n    prompt: '곰',\n    answers: ['gom'],\n    translation: 'bear'\n  },\n  {\n    prompt: '판다',\n    answers: ['panda'],\n    translation: 'panda'\n  },\n  {\n    prompt: '오리',\n    answers: ['ori'],\n    translation: 'duck'\n  },\n  {\n    prompt: '사자',\n    answers: ['saja'],\n    translation: 'lion'\n  },\n  {\n    prompt: '고릴라',\n    answers: ['gorilla'],\n    translation: 'gorilla'\n  },\n  {\n    prompt: '뱀',\n    answers: ['baem'],\n    translation: 'snake'\n  },\n  {\n    prompt: '호랑이',\n    answers: ['horangi'],\n    translation: 'tiger'\n  },\n  {\n    prompt: '과일',\n    answers: ['gwail'],\n    translation: 'fruit'\n  },\n  {\n    prompt: '딸기',\n    answers: ['ttalgi'],\n    translation: 'strawberry'\n  },\n  {\n    prompt: '오렌지',\n    answers: ['orenji'],\n    translation: 'orange'\n  },\n  {\n    prompt: '바나나',\n    answers: ['banana'],\n    translation: 'banana'\n  },\n  {\n    prompt: '사과',\n    answers: ['sagwa'],\n    translation: 'apple'\n  },\n  {\n    prompt: '키위',\n    answers: ['kiwi'],\n    translation: 'kiwi'\n  },\n  {\n    prompt: '망고',\n    answers: ['manggo'],\n    translation: 'mango'\n  },\n  {\n    prompt: '배',\n    answers: ['bae'],\n    translation: 'pear'\n  },\n  {\n    prompt: '포도',\n    answers: ['podo'],\n    translation: 'grapes'\n  },\n  {\n    prompt: '수박',\n    answers: ['subak'],\n    translation: 'watermelon'\n  },\n  {\n    prompt: '체리',\n    answers: ['cheri'],\n    translation: 'cherry'\n  },\n  {\n    prompt: '자두',\n    answers: ['jadu'],\n    translation: 'plum'\n  },\n  {\n    prompt: '살구',\n    answers: ['salgu'],\n    translation: 'apricot'\n  },\n  {\n    prompt: '감',\n    answers: ['gam'],\n    translation: 'persimmon'\n  },\n  {\n    prompt: '멜론',\n    answers: ['mellon'],\n    translation: 'melon'\n  },\n  {\n    prompt: '야채',\n    answers: ['yachae'],\n    translation: 'vegetable'\n  },\n  {\n    prompt: '오이',\n    answers: ['oi'],\n    translation: 'cucumber'\n  },\n  {\n    prompt: '토마토',\n    answers: ['tomato'],\n    translation: 'tomato'\n  },\n  {\n    prompt: '감자',\n    answers: ['gamja'],\n    translation: 'potato'\n  },\n  {\n    prompt: '피망',\n    answers: ['pimang'],\n    translation: 'bell pepper'\n  },\n  {\n    prompt: '마늘',\n    answers: ['maneul'],\n    translation: 'garlic'\n  },\n  {\n    prompt: '콩',\n    answers: ['kong'],\n    translation: 'bean'\n  },\n  {\n    prompt: '버섯',\n    answers: ['beoseot'],\n    translation: 'mushroom'\n  },\n  {\n    prompt: '부추',\n    answers: ['buchu'],\n    translation: 'leek'\n  },\n  {\n    prompt: '생강',\n    answers: ['saenggang'],\n    translation: 'ginger'\n  },\n  {\n    prompt: '양파',\n    answers: ['yangpa'],\n    translation: 'onion'\n  },\n  {\n    prompt: '밤',\n    answers: ['bam'],\n    translation: 'chestnut'\n  },\n  {\n    prompt: '잣',\n    answers: ['jat'],\n    translation: 'pine nut'\n  },\n  {\n    prompt: '호두',\n    answers: ['hodu'],\n    translation: 'walnut'\n  },\n  {\n    prompt: '년',\n    answers: ['nyeon'],\n    translation: 'year'\n  },\n  {\n    prompt: '주',\n    answers: ['ju'],\n    translation: 'week; alcohol; state, province; master, lord'\n  },\n  {\n    prompt: '내일',\n    answers: ['naeil'],\n    translation: 'tomorrow'\n  },\n  {\n    prompt: '어제',\n    answers: ['eoje'],\n    translation: 'yesterday'\n  },\n  {\n    prompt: '시',\n    answers: ['si'],\n    translation: 'town, city; hour, time; poem'\n  },\n  {\n    prompt: '분',\n    answers: ['bun'],\n    translation: 'minute'\n  },\n  {\n    prompt: '하다',\n    answers: ['hada'],\n    translation: 'to do, to make'\n  },\n  {\n    prompt: '오다',\n    answers: ['oda'],\n    translation: 'to come'\n  },\n  {\n    prompt: '웃다',\n    answers: ['utda'],\n    translation: 'to laugh'\n  },\n  {\n    prompt: '달',\n    answers: ['dal'],\n    translation: 'month, moon'\n  },\n  {\n    prompt: '태양',\n    answers: ['taeyang'],\n    translation: 'the Sun'\n  },\n  {\n    prompt: '의사',\n    answers: ['uisa'],\n    translation: 'doctor'\n  },\n  {\n    prompt: '열차',\n    answers: ['yeolcha'],\n    translation: 'train'\n  },\n  {\n    prompt: '기차',\n    answers: ['gicha'],\n    translation: 'train'\n  },\n  {\n    prompt: '거리',\n    answers: ['geori'],\n    translation: 'street, road'\n  },\n  {\n    prompt: '반도',\n    answers: ['bando'],\n    translation: 'peninsula'\n  },\n  {\n    prompt: '서울',\n    answers: ['seoul'],\n    translation: 'Seoul'\n  },\n  {\n    prompt: '호텔',\n    answers: ['hotel'],\n    translation: 'hotel'\n  },\n  {\n    prompt: '산',\n    answers: ['san'],\n    translation: 'mountain; acid'\n  },\n  {\n    prompt: '강',\n    answers: ['gang'],\n    translation: 'river'\n  },\n  {\n    prompt: '제주',\n    answers: ['jeju'],\n    translation: 'Jeju Island (제주도), the only self-governing province in South Korea'\n  },\n  {\n    prompt: '섬',\n    answers: ['seom'],\n    translation: 'island'\n  },\n  {\n    prompt: '불',\n    answers: ['bul'],\n    translation: 'fire; electric light'\n  },\n  {\n    prompt: '김치',\n    answers: ['gimchi'],\n    translation: 'kimchi'\n  },\n  {\n    prompt: '한복',\n    answers: ['hanbok'],\n    translation: 'hanbok (traditional Korean clothing)'\n  },\n  {\n    prompt: '재벌',\n    answers: ['jaebeol'],\n    translation: 'a large, family-run business conglomerate'\n  },\n  {\n    prompt: '케이팝',\n    answers: ['keipap'],\n    translation: 'K-pop'\n  },\n  {\n    prompt: '삼성',\n    answers: ['samseong'],\n    translation: 'Samsung'\n  },\n  {\n    prompt: '현대',\n    answers: ['hyeondae'],\n    translation: 'Hyundai'\n  },\n  {\n    prompt: '기아',\n    answers: ['gia'],\n    translation: 'Kia'\n  },\n  {\n    prompt: '책',\n    answers: ['chaek'],\n    translation: 'book'\n  },\n  {\n    prompt: '북',\n    answers: ['buk'],\n    translation: 'north; drum'\n  },\n  {\n    prompt: '동',\n    answers: ['dong'],\n    translation: 'east; winter; neighbourhood; copper'\n  },\n  {\n    prompt: '남',\n    answers: ['nam'],\n    translation: 'south; man'\n  },\n  {\n    prompt: '서',\n    answers: ['seo'],\n    translation: 'west'\n  },\n  {\n    prompt: '봄',\n    answers: ['bom'],\n    translation: 'spring'\n  },\n  {\n    prompt: '여름',\n    answers: ['yeoreum'],\n    translation: 'summer'\n  },\n  {\n    prompt: '가을',\n    answers: ['gaeul'],\n    translation: 'autumn, fall'\n  },\n  {\n    prompt: '겨울',\n    answers: ['gyeoul'],\n    translation: 'winter'\n  },\n  {\n    prompt: '남자',\n    answers: ['namja'],\n    translation: 'man, boy'\n  },\n  {\n    prompt: '여자',\n    answers: ['yeoja'],\n    translation: 'woman, girl'\n  },\n  {\n    prompt: '사람',\n    answers: ['salam'],\n    translation: 'person, human'\n  }\n];\n\nexport default QUESTIONS;\n","import React, { Component } from 'react';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Prompt from './components/Prompt.jsx';\nimport AnswerInput from './components/AnswerInput.jsx';\nimport AnswerDisplay from './components/AnswerDisplay.jsx';\nimport AnswerCheck from './components/AnswerCheck.jsx';\nimport SubmitButton from './components/SubmitButton.jsx';\n\nimport QUESTIONS from './data/questions_korean.js';\n\nconst synth = window.speechSynthesis;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const newQuestionID = Math.floor(Math.random() * QUESTIONS.length);\n\n    this.state = {\n        currentQuestionID: newQuestionID,\n        latestAnswers: [],\n        latestWrongAnswers: [],\n        answerCheckContent: 'show-answer',\n        inputValue: '',\n        inputClasses: '',\n        inputLocked: false\n      };\n  };\n\n  resetAnswerInputAndCheck = () => {\n    this.setState({ answerCheckContent: 'show-answer',\n        inputClasses: '' });\n  };\n\n  setNewQuestion = () => {\n    let newQuestionID = Math.floor(Math.random() * QUESTIONS.length);\n    const wrongAnswers = this.state.latestWrongAnswers;\n\n    if (wrongAnswers.length > 0\n        && !this.state.latestAnswers.includes(wrongAnswers[0])) {\n      newQuestionID = wrongAnswers.shift();\n      this.setState({ latestWrongAnswers: wrongAnswers });\n    } else {\n      while (this.state.latestAnswers.includes(newQuestionID)) {\n        newQuestionID = Math.floor(Math.random() * QUESTIONS.length);\n      }\n    }\n\n    this.setState({ currentQuestionID: newQuestionID,\n        inputLocked: false });\n  };\n\n  startNewRound = () => {\n    const newLatestAnswers = [this.state.currentQuestionID, ...this.state.latestAnswers];\n    if (newLatestAnswers.length > 5) { newLatestAnswers.pop(); }\n    this.setState({ latestAnswers: newLatestAnswers,\n        answerCheckContent: 'show-answer',\n        inputValue: '' });\n\n    this.setNewQuestion();\n  };\n\n  handleChangeAnswerInput = (event) => {\n    this.setState({ inputValue: event.target.value });\n  };\n\n  handleClickAnswerCheck = () => {\n    const answer = QUESTIONS[this.state.currentQuestionID].answers[0];\n    this.setState({ answerCheckContent: answer });\n  };\n\n  checkAnswer = () => {\n    this.resetAnswerInputAndCheck();\n\n    const currentQuestion = QUESTIONS[this.state.currentQuestionID];\n    const answer = this.state.inputValue;\n\n    if (currentQuestion.answers.includes(answer.toLowerCase())) {\n      if (!this.state.inputLocked) {\n        this.setState({ answerCheckContent: 'correct',\n            inputClasses: 'animated-green',\n            inputLocked: true });\n\n        const toSpeak = new SpeechSynthesisUtterance(currentQuestion.prompt);\n        toSpeak.lang = 'ko-KR';\n        synth.speak(toSpeak);\n\n        window.setTimeout(this.startNewRound, 1000);\n      }\n    } else {\n      if (!this.state.latestWrongAnswers.includes(this.state.currentQuestionID)) {\n        this.setState(prevState => ({\n          latestWrongAnswers: [...prevState.latestWrongAnswers, this.state.currentQuestionID]\n        }));\n      }\n\n      this.setState({ answerCheckContent: 'sorry',\n          inputClasses: 'animated-shake' });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Up to Speed: Reading Korean</h1>\n        <Prompt prompt={QUESTIONS[this.state.currentQuestionID].prompt} />\n        <AnswerInput checkAnswer={this.checkAnswer}\n            value={this.state.inputValue}\n            handleChange={this.handleChangeAnswerInput}\n            handleAnimationEnd={this.resetAnswerInputAndCheck}\n            classes={this.state.inputClasses} />\n        <SubmitButton checkAnswer={this.checkAnswer} />\n        <AnswerCheck content={this.state.answerCheckContent}\n            handleClick={this.handleClickAnswerCheck} />\n        <div style={{ fontSize: '1.5rem', marginTop: '12px' }}>\n          {this.state.latestAnswers.map((answer,id) => {\n              return <AnswerDisplay key={id} answer={QUESTIONS[answer]} />\n            })}\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}